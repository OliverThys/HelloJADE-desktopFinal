[globals]
; Variables globales HelloJADE
HELLOJADE_VERSION=2.0.0
HELLOJADE_HOSPITAL_MONS=192.168.1.100
HELLOJADE_HOSPITAL_LILLE=192.168.1.101
HELLOJADE_EMERGENCY_NUMBER=112

; Contexte principal pour les appels médicaux HelloJADE
[hellojade-medical]
; Appel entrant - démarrage du dialogue médical
exten => s,1,NoOp(=== HelloJADE Medical Call Started ===)
 same => n,Set(CALL_ID=${CALL_ID})
 same => n,Set(PATIENT_ID=${PATIENT_ID})
 same => n,Set(HOSPITAL_ID=${HOSPITAL_ID})
 same => n,Set(START_TIME=${EPOCH})
 same => n,Answer()
 same => n,Wait(1)
 same => n,Set(PLAYBACK_OPTIONS=skip)
 same => n,Playback(hellojade/welcome)
 same => n,Set(STEP=identity_verification)
 same => n,Goto(medical-dialog,${STEP},1)

; Dialogue médical interactif
[medical-dialog]
; Vérification d'identité
exten => identity_verification,1,NoOp(=== Identity Verification ===)
 same => n,Playback(hellojade/identity_check)
 same => n,Read(RESPONSE,hellojade/beep,1,10)
 same => n,Set(IDENTITY_RESPONSE=${RESPONSE})
 same => n,Goto(medical-dialog,birth_date,1)

; Vérification date de naissance
exten => birth_date,1,NoOp(=== Birth Date Verification ===)
 same => n,Playback(hellojade/birth_date_question)
 same => n,Read(RESPONSE,hellojade/beep,1,15)
 same => n,Set(BIRTH_DATE_RESPONSE=${RESPONSE})
 same => n,Goto(medical-dialog,pain_level,1)

; Question sur la douleur
exten => pain_level,1,NoOp(=== Pain Level Question ===)
 same => n,Playback(hellojade/pain_question)
 same => n,Read(RESPONSE,hellojade/beep,1,5)
 same => n,Set(PAIN_LEVEL=${RESPONSE})
 same => n,Playback(hellojade/pain_location_question)
 same => n,Read(RESPONSE,hellojade/beep,1,10)
 same => n,Set(PAIN_LOCATION=${RESPONSE})
 same => n,Goto(medical-dialog,medication,1)

; Question sur les médicaments
exten => medication,1,NoOp(=== Medication Question ===)
 same => n,Playback(hellojade/medication_question)
 same => n,Read(RESPONSE,hellojade/beep,1,5)
 same => n,Set(MEDICATION_RESPONSE=${RESPONSE})
 same => n,Goto(medical-dialog,transit,1)

; Question sur le transit
exten => transit,1,NoOp(=== Transit Question ===)
 same => n,Playback(hellojade/transit_question)
 same => n,Read(RESPONSE,hellojade/beep,1,5)
 same => n,Set(TRANSIT_RESPONSE=${RESPONSE})
 same => n,GotoIf($["${TRANSIT_RESPONSE}" = "non"]?transit_problem:transit_ok)
 same => n(transit_problem),Playback(hellojade/transit_problem_question)
 same => n,Read(RESPONSE,hellojade/beep,1,10)
 same => n,Set(TRANSIT_PROBLEM=${RESPONSE})
 same => n(transit_ok),Goto(medical-dialog,mood,1)

; Question sur le moral
exten => mood,1,NoOp(=== Mood Question ===)
 same => n,Playback(hellojade/mood_question)
 same => n,Read(RESPONSE,hellojade/beep,1,5)
 same => n,Set(MOOD_LEVEL=${RESPONSE})
 same => n,GotoIf($["${MOOD_LEVEL}" < "7"]?mood_problem:mood_ok)
 same => n(mood_problem),Playback(hellojade/mood_details_question)
 same => n,Read(RESPONSE,hellojade/beep,1,10)
 same => n,Set(MOOD_DETAILS=${RESPONSE})
 same => n(mood_ok),Goto(medical-dialog,fever,1)

; Question sur la fièvre
exten => fever,1,NoOp(=== Fever Question ===)
 same => n,Playback(hellojade/fever_question)
 same => n,Read(RESPONSE,hellojade/beep,1,5)
 same => n,Set(FEVER_RESPONSE=${RESPONSE})
 same => n,GotoIf($["${FEVER_RESPONSE}" = "oui"]?fever_yes:fever_no)
 same => n(fever_yes),Playback(hellojade/temperature_question)
 same => n,Read(RESPONSE,hellojade/beep,1,5)
 same => n,Set(TEMPERATURE=${RESPONSE})
 same => n(fever_no),Goto(medical-dialog,other_complaints,1)

; Question sur autres plaintes
exten => other_complaints,1,NoOp(=== Other Complaints Question ===)
 same => n,Playback(hellojade/other_question)
 same => n,Read(RESPONSE,hellojade/beep,1,15)
 same => n,Set(OTHER_COMPLAINTS=${RESPONSE})
 same => n,Goto(medical-dialog,calculate_score,1)

; Calcul du score médical
exten => calculate_score,1,NoOp(=== Calculating Medical Score ===)
 same => n,Set(SCORE=100)
 same => n,GotoIf($["${PAIN_LEVEL}" > "5"]?pain_penalty:check_medication)
 same => n(pain_penalty),Set(SCORE=$[${SCORE} - 20])
 same => n(check_medication),GotoIf($["${MEDICATION_RESPONSE}" = "non"]?med_penalty:check_transit)
 same => n(med_penalty),Set(SCORE=$[${SCORE} - 15])
 same => n(check_transit),GotoIf($["${TRANSIT_RESPONSE}" = "non"]?transit_penalty:check_mood)
 same => n(transit_penalty),Set(SCORE=$[${SCORE} - 10])
 same => n(check_mood),GotoIf($["${MOOD_LEVEL}" < "5"]?mood_penalty:check_fever)
 same => n(mood_penalty),Set(SCORE=$[${SCORE} - 15])
 same => n(check_fever),GotoIf($["${FEVER_RESPONSE}" = "oui"]?fever_penalty:check_emergency)
 same => n(fever_penalty),Set(SCORE=$[${SCORE} - 20])
 same => n(check_emergency),GotoIf($["${OTHER_COMPLAINTS}" = "urgence"]?emergency_penalty:finalize_score)
 same => n(emergency_penalty),Set(SCORE=$[${SCORE} - 20])
 same => n(finalize_score),GotoIf($["${SCORE}" < "0"]?score_zero:save_results)
 same => n(score_zero),Set(SCORE=0)
 same => n(save_results),Goto(medical-dialog,end_call,1)

; Fin de l'appel
exten => end_call,1,NoOp(=== Ending Medical Call ===)
 same => n,Set(END_TIME=${EPOCH})
 same => n,Set(DURATION=$[${END_TIME} - ${START_TIME}])
 same => n,Playback(hellojade/call_ending)
 same => n,AGI(hellojade-save-call.agi,${CALL_ID},${PATIENT_ID},${HOSPITAL_ID},${SCORE},${DURATION})
 same => n,Hangup()

; Gestion des erreurs
exten => h,1,NoOp(=== Call Hung Up ===)
 same => n,AGI(hellojade-call-ended.agi,${CALL_ID},${PATIENT_ID})

; Contexte pour les appels sortants
[hellojade-outbound]
exten => _X.,1,NoOp(=== Outbound Call ===)
 same => n,Dial(PJSIP/${EXTEN}@patient-template,30)
 same => n,Hangup()

; Contexte d'urgence
[emergency]
exten => s,1,NoOp(=== Emergency Transfer ===)
 same => n,Playback(hellojade/emergency_transfer)
 same => n,Dial(PJSIP/${HELLOJADE_EMERGENCY_NUMBER}@emergency-endpoint,0)
 same => n,Hangup()

; Contexte pour les tests
[hellojade-test]
exten => 100,1,NoOp(=== Test Extension ===)
 same => n,Answer()
 same => n,Playback(hellojade/test_message)
 same => n,Hangup()

; Contexte par défaut
[default]
exten => _X.,1,NoOp(=== Default Context ===)
 same => n,Playback(invalid)
 same => n,Hangup()
